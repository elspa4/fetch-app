{"version":3,"sources":["styles.ts","components/DataTable.tsx","components/TabPanel.tsx","api.ts","components/ListGroups.tsx","App.tsx","index.tsx"],"names":["PRIMARY_COLOR","SECONDARY_COLOR","theme","createTheme","palette","primary","main","secondary","overrides","MuiTableCell","head","color","fontSize","fontWeight","MuiTableRow","root","backgroundColor","Container","styled","TableContainer","TableHeader","TableHead","DataTable","items","showListId","Table","size","TableRow","TableCell","TableBody","map","item","listId","id","name","TabPanel","tabValue","index","children","role","hidden","Box","p","getListData","a","axios","get","then","response","filteredArray","data","filter","listIds","uniqueListIds","Set","sort","groups","ungrouped","forEach","groupById","b","localeCompare","undefined","numeric","itemGroup","push","Heading","h1","ListGroups","useState","dataByListId","setDataByListId","allData","setAllData","loading","setLoading","error","setError","tab","setTab","useEffect","catch","e","console","log","finally","length","CircularProgress","Tabs","value","onChange","event","newValue","centered","indicatorColor","textColor","Tab","label","dataGroup","App","className","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b052d0a3.chunk.js","sourcesContent":["import { createTheme } from '@material-ui/core/styles'\n\nexport const PRIMARY_COLOR = '#300C3A'\nexport const SECONDARY_COLOR = '#FBA817'\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      main: PRIMARY_COLOR,\n    },\n    secondary: {\n      main: SECONDARY_COLOR,\n    },\n  },\n  overrides: {\n    MuiTableCell: {\n      head: {\n        color: SECONDARY_COLOR,\n        fontSize: '14px',\n        fontWeight: 'bold',\n      },\n    },\n    MuiTableRow: {\n      root: {\n        '&:nth-of-type(odd)': {\n          backgroundColor: 'rgb(48, 12, 58, .1)',\n        },\n        '&:nth-of-type(even)': {\n          backgroundColor: 'rgb(251, 168, 23, .1)',\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Table,\n  TableContainer,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\n\nimport { Item } from '../types'\nimport { PRIMARY_COLOR } from '../styles'\n\nconst Container = styled(TableContainer)`\n  border: 1px solid #e3e3e3;\n  margin: auto;\n  max-width: 500px;\n`\n\nconst TableHeader = styled(TableHead)`\n  background: ${PRIMARY_COLOR};\n`\n\nconst DataTable: React.FC<{\n  items: Item[]\n  showListId?: boolean\n}> = ({ items, showListId = false }) => {\n  return (\n    <Container>\n      <Table size=\"small\">\n        <TableHeader>\n          <TableRow>\n            {showListId ? <TableCell>List ID</TableCell> : null}\n            <TableCell>ID</TableCell>\n            <TableCell>Name</TableCell>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {items.map(item => (\n            <TableRow key={item.id}>\n              {showListId ? <TableCell>{item.listId}</TableCell> : null}\n              <TableCell>{item.id}</TableCell>\n              <TableCell>{item.name}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Container>\n  )\n}\n\nexport default DataTable\n","import React from 'react'\nimport { Box } from '@material-ui/core'\n\nconst TabPanel: React.FC<{\n  tabValue: number\n  index: number\n}> = ({ tabValue, index, children }) => {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={tabValue !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {tabValue === index && <Box p={3}>{children}</Box>}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import axios from 'axios'\nimport { Item, ItemGroup } from './types'\n\n/**\n * Gets a list of unsorted and unfiltered data\n * from the Fetch hiring api, and returns it as\n * an object containing a set of grouped and ungrouped items\n */\nexport const getListData = async () => {\n  return axios\n    .get('https://fetch-hiring.s3.amazonaws.com/hiring.json')\n    .then(response => {\n      const data: Item[] = response?.data || []\n\n      // remove all null entries to take size from 1000 -> 320\n      const filteredArray = data.filter(item => item.name)\n\n      // get the individual list ids\n      const listIds = filteredArray.map(item => item.listId)\n      let uniqueListIds = [...new Set(listIds)].sort()\n\n      let groups: Array<ItemGroup> = []\n      let ungrouped: Array<Item> = []\n      uniqueListIds.forEach(id => {\n        const groupById = filteredArray.filter(item => item.listId === id)\n        // there are faster sorts out there, but this should do\n        groupById.sort((a, b) =>\n          (a?.name || '').localeCompare(b?.name || '', undefined, {\n            numeric: true,\n          }),\n        )\n        const itemGroup = {\n          listId: id,\n          items: groupById,\n        } as ItemGroup\n        groups.push(itemGroup)\n        ungrouped.push(...groupById)\n      })\n\n      return {\n        groups,\n        ungrouped,\n      }\n    })\n}\n","import React, { useEffect, useState } from 'react'\nimport DataTable from './DataTable'\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core'\nimport TabPanel from './TabPanel'\nimport { Item, ItemGroup } from '../types'\nimport { getListData } from '../api'\nimport styled from 'styled-components'\nimport { PRIMARY_COLOR } from '../styles'\n\nconst Heading = styled.h1`\n  color: ${PRIMARY_COLOR};\n`\n\nconst ListGroups: React.FC = () => {\n  // data for display\n  const [dataByListId, setDataByListId] = useState<Array<ItemGroup>>([])\n  const [allData, setAllData] = useState<Array<Item>>([])\n\n  // various UI state (loading, error, tab)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n  const [tab, setTab] = useState(0)\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTab(newValue)\n  }\n\n  // load the data\n  useEffect(() => {\n    setLoading(true)\n    getListData()\n      .then(response => {\n        setDataByListId(response.groups)\n        setAllData(response.ungrouped)\n      })\n      .catch(e => {\n        console.log(`Failed to fetch data groups: ${e}`)\n        setError(true)\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  }, [])\n\n  /**\n   * TODOS:\n   * - decide on display\n   * - optimize functions\n   * - write unit tests\n   * - cleanup repo\n   * - deploy\n   */\n\n  return (\n    <>\n      <Heading>Elena's Coding Challenge App</Heading>\n      {error ? <div>Oh no, something went wrong!</div> : null}\n      {loading || dataByListId?.length < 1 ? (\n        <CircularProgress />\n      ) : (\n        <>\n          <Tabs\n            value={tab}\n            onChange={handleTabChange}\n            centered\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n          >\n            <Tab label={'All'} />\n            {dataByListId.map(dataGroup => (\n              <Tab\n                key={`tab-${dataGroup.listId}`}\n                label={`List ID: ${dataGroup.listId}`}\n              />\n            ))}\n          </Tabs>\n          <>\n            <TabPanel tabValue={tab} index={0}>\n              <DataTable items={allData} showListId />\n            </TabPanel>\n            {dataByListId.map((dataGroup, index) => (\n              <TabPanel\n                tabValue={tab}\n                index={index + 1}\n                key={`tab-${dataGroup.listId}`}\n              >\n                <DataTable items={dataGroup.items} />\n              </TabPanel>\n            ))}\n          </>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default ListGroups\n","import { ThemeProvider } from '@material-ui/core'\nimport React from 'react'\nimport './App.css'\nimport ListGroups from './components/ListGroups'\nimport { theme } from './styles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <ListGroups />\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}