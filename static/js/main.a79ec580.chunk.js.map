{"version":3,"sources":["components/DataTable.tsx","components/TabPanel.tsx","api.ts","components/ListGroups.tsx","App.tsx","index.tsx"],"names":["Container","styled","TableContainer","DataTable","items","showListId","Table","size","TableHead","TableRow","TableCell","TableBody","map","item","listId","id","name","TabPanel","tabValue","index","children","role","hidden","Box","p","getListData","a","axios","get","then","response","filteredArray","data","filter","listIds","uniqueListIds","Set","sort","groups","ungrouped","forEach","groupById","b","localeCompare","undefined","numeric","itemGroup","push","Heading","h1","ListGroups","useState","dataByListId","setDataByListId","allData","setAllData","tab","setTab","useEffect","Tabs","value","onChange","event","newValue","centered","Tab","label","dataGroup","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a79ec580.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Table,\n  TableContainer,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\n\nimport { Item } from '../types'\n\nexport const Container = styled(TableContainer)`\n  border: 1px solid #e3e3e3;\n  margin: auto;\n  max-width: 500px;\n`\n\nconst DataTable: React.FC<{\n  items: Item[]\n  showListId?: boolean\n}> = ({ items, showListId = false }) => {\n  return (\n    <Container>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            {showListId ? <TableCell>List ID</TableCell> : null}\n            <TableCell>ID</TableCell>\n            <TableCell>Name</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {items.map(item => (\n            <TableRow key={item.id}>\n              {showListId ? <TableCell>{item.listId}</TableCell> : null}\n              <TableCell>{item.id}</TableCell>\n              <TableCell>{item.name}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Container>\n  )\n}\n\nexport default DataTable\n","import React from 'react'\nimport { Box } from '@material-ui/core'\n\nconst TabPanel: React.FC<{\n  tabValue: number\n  index: number\n}> = ({ tabValue, index, children }) => {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={tabValue !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {tabValue === index && <Box p={3}>{children}</Box>}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import axios from 'axios'\nimport { Item, ItemGroup } from './types'\n\nexport const getListData = async () => {\n  return axios\n    .get('https://fetch-hiring.s3.amazonaws.com/hiring.json')\n    .then(response => {\n      const data: Item[] = response?.data || []\n\n      // remove all null entries to take size from 1000 -> 320\n      const filteredArray = data.filter(item => item.name)\n\n      // get the individual list ids\n      const listIds = filteredArray.map(item => item.listId)\n      let uniqueListIds = [...new Set(listIds)].sort()\n\n      let groups: Array<ItemGroup> = []\n      let ungrouped: Array<Item> = []\n      uniqueListIds.forEach(id => {\n        const groupById = filteredArray.filter(item => item.listId === id)\n        groupById.sort((a, b) =>\n          (a?.name || '').localeCompare(b?.name || '', undefined, {\n            numeric: true,\n          }),\n        )\n        const itemGroup = {\n          listId: id,\n          items: groupById,\n        } as ItemGroup\n        groups.push(itemGroup)\n        ungrouped.push(...groupById)\n      })\n\n      return {\n        groups,\n        ungrouped,\n      }\n    })\n}\n","import React, { useEffect, useState } from 'react'\nimport DataTable from './DataTable'\nimport { Tabs, Tab } from '@material-ui/core'\nimport TabPanel from './TabPanel'\nimport { Item, ItemGroup } from '../types'\nimport { getListData } from '../api'\nimport styled from 'styled-components'\n\nconst Heading = styled.h1`\n  color: #300c3a;\n`\n\n//FBA817\n\nconst ListGroups: React.FC = () => {\n  const [dataByListId, setDataByListId] = useState<Array<ItemGroup>>([])\n  const [allData, setAllData] = useState<Array<Item>>([])\n\n  const [tab, setTab] = useState(0)\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTab(newValue)\n  }\n\n  useEffect(() => {\n    getListData().then(response => {\n      setDataByListId(response.groups)\n      setAllData(response.ungrouped)\n    })\n  }, [])\n\n  /**\n   * TODOS:\n   * - error handling\n   * - decide on display\n   * - optimize functions\n   * - write unit tests\n   * - cleanup repo\n   * - deploy\n   */\n\n  return (\n    <>\n      <Heading>Elena's Coding Challenge App</Heading>\n      <Tabs value={tab} onChange={handleTabChange} centered>\n        <Tab label={'All'} />\n        {dataByListId.map(dataGroup => (\n          <Tab\n            key={`tab-${dataGroup.listId}`}\n            label={`List ID: ${dataGroup.listId}`}\n          />\n        ))}\n      </Tabs>\n      <>\n        <TabPanel tabValue={tab} index={0}>\n          <DataTable items={allData} showListId />\n        </TabPanel>\n        {dataByListId.map((dataGroup, index) => (\n          <TabPanel tabValue={tab} index={index + 1}>\n            <DataTable items={dataGroup.items} />\n          </TabPanel>\n        ))}\n      </>\n    </>\n  )\n}\n\nexport default ListGroups\n","import React from 'react'\nimport './App.css'\nimport ListGroups from './components/ListGroups'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ListGroups />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}